name: CI Pipeline and Semantic Release
on:
  push:
    branches:
      - main
      - alpha

jobs:
  build-test:
    name: Bld, Format, Lint, Test, Report
    runs-on: ubuntu-latest
    if: "! contains(github.event.head_commit.message, '[skip ci]')"

    steps:
      # Step 1: Check out the code from the repository
      - name: Check out repository
        uses: actions/checkout@v4

      #######################################################################
      # Step 2: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      #######################################################################
      # Step 3: Install dependencies (api, dev, and testing dependencies)
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r app/requirements.txt # app dependencies
          pip install -r .devcontainer/requirements.txt # Dev/testing dependencies
      #######################################################################
      # Step 4: Run code formatting check with Black
      - name: Check code formatting with Black
        run: |
          black --diff .
      #######################################################################
      # Step 4: Run code formatting check with Black
      - name: Formatting with Black
        run: |
          black .
      #######################################################################
      # Step 5: Run code linting with Flake8
      - name: Lint code with Flake8
        run: |
          if flake8 . -v; then
            echo "flake8 succeed!"
          else
            echo "flake8 exit with errors"
            echo "Logs need generated and stored"
          fi
      #######################################################################
      # Step 6: Run unit tests and generate a coverage report
      - name: Run tests with Pytest and generate coverage report
        run: |
          pytest --cov=. --cov-report=xml --cov-report=term
      #######################################################################
      # Step 7: Upload coverage report to Codecov
      - name: Upload results to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          name: codecov-umbrella
          fail_ci_if_error: true
          files: ./coverage.xml
          flags: unittests
          verbose: true

      #######################################################################
      # Step 8: Run SonarCloud analysis
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v3.1.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  semantic-release:
    name: Semantic Release
    runs-on: ubuntu-latest
    needs: build-test
    permissions:
      contents: write
    outputs:
      IMAGE_TAG: ${{ steps.semantic.outputs.new_release_version }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: actions/setup-node@v4.1.0
        with:
          node-version: "lts/*"

      #######################################################################
      - name: Prepare prerelease semantic
        if: github.ref != 'refs/heads/main'
        run: mv .releaserc.prerelease.yml .releaserc.yml

      #######################################################################
      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v4
        id: semantic
        with:
          semantic_version: 24.1.0
          branches: |
            [
              '+([0-9])?(.{+([0-9]),x}).x',
              'main',
              {
                name: 'alpha',
                prerelease: true
              }
            ]
          extra_plugins: |
            @semantic-release/changelog
            @semantic-release/exec
            @semantic-release/git
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      #######################################################################
      - name: New Release Version
        if: steps.semantic.outputs.new_release_published == 'true'
        run: |
          echo "New Realease Version: ${{ steps.semantic.outputs.new_release_version }}"